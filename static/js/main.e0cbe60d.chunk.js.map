{"version":3,"sources":["components/Noticia.js","components/ListaNoticias.js","components/Formulario.js","url/url.js","config.js","components/api/api.js","App.js","serviceWorker.js","index.js"],"names":["Noticia","noticia","url","author","title","description","source","urlToImage","image","className","src","alt","name","href","target","rel","ListaNoticias","noticias","map","key","Formulario","onChange","e","props","getCategoria","value","Component","createUrl","categoria","getData","a","fetch","respuesta","json","App","state","setState","this","articles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAkCeA,G,MA/BC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACAC,GAA6CD,EAApDE,OAAoDF,EAA7CC,KAAKE,EAAwCH,EAAxCG,MAAMC,EAAkCJ,EAAlCI,YAAYC,EAAsBL,EAAtBK,OAAQC,EAAcN,EAAdM,WACvCC,EAASD,EACX,yBAAKE,UAAU,cACf,yBAAKC,IAAKH,EAAYI,IAAKP,IAC3B,0BAAMK,UAAU,cAAcH,EAAOM,OAEtC,KAEH,OACI,yBAAKH,UAAU,iBACZ,yBAAKA,UAAU,QACVD,EACA,yBAAKC,UAAU,gBACX,4BAAKL,GACL,2BAAIC,IAER,yBAAKI,UAAU,eACX,uBAAGI,KAAMX,EAAKY,OAAO,SACpBC,IAAI,sBACJN,UAAU,gCAFX,6BCALO,EAjBO,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACpB,OACI,yBAAKR,UAAU,OACVQ,GAAYA,EAASC,KAAI,SAAAjB,GAAO,OAC7B,kBAAC,EAAD,CACAkB,IAAKlB,EAAQC,IACZD,QAASA,SCuBXmB,E,iLA3BF,IAAD,OACJ,OACI,yBAAKX,UAAU,iBACX,yBAAKA,UAAU,wBACX,8BACI,iEACA,yBAAKA,UAAU,8BACX,4BAAQY,SAAU,SAACC,GAAD,OAAO,EAAKC,MAAMC,aAAaF,EAAER,OAAOW,SACtD,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,YAAd,qB,GAhBPC,aCETC,EADG,SAACC,GAAD,gBAFN,6DAEM,OAA4BA,GAA5B,OCHT,6CCOKC,EANF,uCAAG,WAAOD,GAAP,iBAAAE,EAAA,sEACWC,MAAMJ,EAAUC,IAD3B,cACPI,EADO,gBAEUA,EAAUC,OAFpB,cAEPhB,EAFO,yBAGNA,GAHM,2CAAH,sDCiDEiB,E,2MA3CbC,MAAQ,CACNlB,SAAU,GACVW,UAAW,I,EAsBbJ,aAAe,SAAAI,GACb,EAAKQ,SAAS,CACZR,e,mNApBqBC,EAAQQ,KAAKF,MAAMP,W,OAArCX,E,OAELoB,KAAKD,SAAS,CACZnB,SAAUA,EAASqB,W,iRAQGT,EAAQQ,KAAKF,MAAMP,W,OAArCX,E,OAENoB,KAAKD,SAAS,CACZnB,SAAUA,EAASqB,W,qIAWrB,OACE,kBAAC,WAAD,KAEE,kBAAC,EAAD,CAAYd,aAAca,KAAKb,eAC/B,yBAAKf,UAAU,uCACb,kBAAC,EAAD,CAAeQ,SAAUoB,KAAKF,MAAMlB,iB,GArC5BS,aCKEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e0cbe60d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Noticia = ({noticia}) => {\r\n    const {author,url, title,description,source, urlToImage} = noticia;\r\n    const image = (urlToImage) ? (\r\n        <div className='card-image'>\r\n        <img src={urlToImage} alt={title}></img>\r\n        <samp className=\"card-title\">{source.name}</samp>\r\n    </div>\r\n    ): null;\r\n\r\n    return (\r\n        <div className=\"col s12 m6 l4\">\r\n           <div className=\"card\">\r\n               {image}\r\n                <div className='card-content'>\r\n                    <h3>{title}</h3>\r\n                    <p>{description}</p>\r\n                </div>\r\n                <div className=\"card-action\">\r\n                    <a href={url} target=\"_black\"\r\n                     rel=\"noopener noreferror\" \r\n                     className=\"waves-effect waves-light btn\">Ver Noticia Completa</a>\r\n                </div>\r\n           </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nNoticia.propTypes = {\r\n    noticia: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Noticia;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Noticia from './Noticia';\r\n\r\nconst ListaNoticias = ({noticias}) => {\r\n    return (\r\n        <div className='row'>\r\n            {noticias && noticias.map(noticia => (\r\n                <Noticia\r\n                key={noticia.url}\r\n                 noticia={noticia}/>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\n//Documentando\r\nListaNoticias.propTypes = {\r\n    Noticias: PropTypes.array.isRequired\r\n};\r\n\r\nexport default ListaNoticias;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div className='buscador row '>\r\n                <div className='col s12 m8 offset-m2'>\r\n                    <form >\r\n                        <h2>Encuentra Noticias por categorias</h2>\r\n                        <div className=\"input-field col s12  white\">\r\n                            <select onChange={(e) => this.props.getCategoria(e.target.value)} >\r\n                                <option value='general'>General</option>\r\n                                <option value='health'>health</option>\r\n                                <option value='science'>science</option>\r\n                                <option value='sport'>sport</option>\r\n                                <option value='technology'>technology</option>\r\n                                <option value='business'>business</option>\r\n                            </select>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nFormulario.propTypes = {\r\n    getCategoria: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Formulario;","import {config} from '../config';\r\n\r\nconst baseUrl = `https://newsapi.org/v2/top-headlines?country=us&category=`;\r\nconst apiKey = config.apiKey;\r\n const createUrl = (categoria) => `${baseUrl}${categoria}${apiKey}`;\r\n export default createUrl;\r\n\r\n ","export const  config = {\r\n    apiKey :  `&apiKey=6dafe02a898141a6b034fdbc933e8a49`,\r\n}","import createUrl from \"../../url/url\"\r\n\r\nconst getData = async (categoria) => {\r\n   const respuesta = await fetch(createUrl(categoria));\r\n   const noticias = await respuesta.json();\r\n   return noticias;\r\n};\r\n\r\nexport default getData;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport ListaNoticias from \"./components/ListaNoticias\";\r\nimport Formulario from \"./components/Formulario\";\r\nimport getData from \"./components/api/api\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    noticias: [],\r\n    categoria: '',\r\n  };\r\n\r\nasync componentDidMount() {\r\n  const  noticias = await  getData(this.state.categoria);\r\n\r\n    this.setState({\r\n      noticias: noticias.articles\r\n    });\r\n  }\r\n \r\n  \r\n  \r\n\r\n  async componentDidUpdate() {\r\n    const noticias = await  getData(this.state.categoria);\r\n\r\n    this.setState({\r\n      noticias: noticias.articles\r\n    });\r\n  }\r\n\r\n  getCategoria = categoria => {\r\n    this.setState({\r\n      categoria\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n       \r\n        <Formulario getCategoria={this.getCategoria} />\r\n        <div className=\"container white contenedor-noticias\">\r\n          <ListaNoticias noticias={this.state.noticias} />\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}